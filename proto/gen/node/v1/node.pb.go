// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: node/v1/node.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeType int32

const (
	NodeType_NODE_UNSPECIFIED   NodeType = 0
	NodeType_LINE_BREAK         NodeType = 1
	NodeType_PARAGRAPH          NodeType = 2
	NodeType_CODE_BLOCK         NodeType = 3
	NodeType_HEADING            NodeType = 4
	NodeType_HORIZONTAL_RULE    NodeType = 5
	NodeType_BLOCKQUOTE         NodeType = 6
	NodeType_ORDERED_LIST       NodeType = 7
	NodeType_UNORDERED_LIST     NodeType = 8
	NodeType_TASK_LIST          NodeType = 9
	NodeType_MATH_BLOCK         NodeType = 10
	NodeType_TABLE              NodeType = 11
	NodeType_EMBEDDED_CONTENT   NodeType = 12
	NodeType_TEXT               NodeType = 13
	NodeType_BOLD               NodeType = 14
	NodeType_ITALIC             NodeType = 15
	NodeType_BOLD_ITALIC        NodeType = 16
	NodeType_CODE               NodeType = 17
	NodeType_IMAGE              NodeType = 18
	NodeType_LINK               NodeType = 19
	NodeType_AUTO_LINK          NodeType = 20
	NodeType_TAG                NodeType = 21
	NodeType_STRIKETHROUGH      NodeType = 22
	NodeType_ESCAPING_CHARACTER NodeType = 23
	NodeType_MATH               NodeType = 24
	NodeType_HIGHLIGHT          NodeType = 25
	NodeType_SUBSCRIPT          NodeType = 26
	NodeType_SUPERSCRIPT        NodeType = 27
	NodeType_REFERENCED_CONTENT NodeType = 28
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0:  "NODE_UNSPECIFIED",
		1:  "LINE_BREAK",
		2:  "PARAGRAPH",
		3:  "CODE_BLOCK",
		4:  "HEADING",
		5:  "HORIZONTAL_RULE",
		6:  "BLOCKQUOTE",
		7:  "ORDERED_LIST",
		8:  "UNORDERED_LIST",
		9:  "TASK_LIST",
		10: "MATH_BLOCK",
		11: "TABLE",
		12: "EMBEDDED_CONTENT",
		13: "TEXT",
		14: "BOLD",
		15: "ITALIC",
		16: "BOLD_ITALIC",
		17: "CODE",
		18: "IMAGE",
		19: "LINK",
		20: "AUTO_LINK",
		21: "TAG",
		22: "STRIKETHROUGH",
		23: "ESCAPING_CHARACTER",
		24: "MATH",
		25: "HIGHLIGHT",
		26: "SUBSCRIPT",
		27: "SUPERSCRIPT",
		28: "REFERENCED_CONTENT",
	}
	NodeType_value = map[string]int32{
		"NODE_UNSPECIFIED":   0,
		"LINE_BREAK":         1,
		"PARAGRAPH":          2,
		"CODE_BLOCK":         3,
		"HEADING":            4,
		"HORIZONTAL_RULE":    5,
		"BLOCKQUOTE":         6,
		"ORDERED_LIST":       7,
		"UNORDERED_LIST":     8,
		"TASK_LIST":          9,
		"MATH_BLOCK":         10,
		"TABLE":              11,
		"EMBEDDED_CONTENT":   12,
		"TEXT":               13,
		"BOLD":               14,
		"ITALIC":             15,
		"BOLD_ITALIC":        16,
		"CODE":               17,
		"IMAGE":              18,
		"LINK":               19,
		"AUTO_LINK":          20,
		"TAG":                21,
		"STRIKETHROUGH":      22,
		"ESCAPING_CHARACTER": 23,
		"MATH":               24,
		"HIGHLIGHT":          25,
		"SUBSCRIPT":          26,
		"SUPERSCRIPT":        27,
		"REFERENCED_CONTENT": 28,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_v1_node_proto_enumTypes[0].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_node_v1_node_proto_enumTypes[0]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{0}
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type NodeType `protobuf:"varint,1,opt,name=type,proto3,enum=gomark.node.v1.NodeType" json:"type,omitempty"`
	// Types that are assignable to Node:
	//
	//	*Node_LineBreakNode
	//	*Node_ParagraphNode
	//	*Node_CodeBlockNode
	//	*Node_HeadingNode
	//	*Node_HorizontalRuleNode
	//	*Node_BlockquoteNode
	//	*Node_OrderedListNode
	//	*Node_UnorderedListNode
	//	*Node_TaskListNode
	//	*Node_MathBlockNode
	//	*Node_TableNode
	//	*Node_EmbeddedContentNode
	//	*Node_TextNode
	//	*Node_BoldNode
	//	*Node_ItalicNode
	//	*Node_BoldItalicNode
	//	*Node_CodeNode
	//	*Node_ImageNode
	//	*Node_LinkNode
	//	*Node_AutoLinkNode
	//	*Node_TagNode
	//	*Node_StrikethroughNode
	//	*Node_EscapingCharacterNode
	//	*Node_MathNode
	//	*Node_HighlightNode
	//	*Node_SubscriptNode
	//	*Node_SuperscriptNode
	//	*Node_ReferencedContentNode
	Node isNode_Node `protobuf_oneof:"node"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetType() NodeType {
	if x != nil {
		return x.Type
	}
	return NodeType_NODE_UNSPECIFIED
}

func (m *Node) GetNode() isNode_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *Node) GetLineBreakNode() *LineBreakNode {
	if x, ok := x.GetNode().(*Node_LineBreakNode); ok {
		return x.LineBreakNode
	}
	return nil
}

func (x *Node) GetParagraphNode() *ParagraphNode {
	if x, ok := x.GetNode().(*Node_ParagraphNode); ok {
		return x.ParagraphNode
	}
	return nil
}

func (x *Node) GetCodeBlockNode() *CodeBlockNode {
	if x, ok := x.GetNode().(*Node_CodeBlockNode); ok {
		return x.CodeBlockNode
	}
	return nil
}

func (x *Node) GetHeadingNode() *HeadingNode {
	if x, ok := x.GetNode().(*Node_HeadingNode); ok {
		return x.HeadingNode
	}
	return nil
}

func (x *Node) GetHorizontalRuleNode() *HorizontalRuleNode {
	if x, ok := x.GetNode().(*Node_HorizontalRuleNode); ok {
		return x.HorizontalRuleNode
	}
	return nil
}

func (x *Node) GetBlockquoteNode() *BlockquoteNode {
	if x, ok := x.GetNode().(*Node_BlockquoteNode); ok {
		return x.BlockquoteNode
	}
	return nil
}

func (x *Node) GetOrderedListNode() *OrderedListNode {
	if x, ok := x.GetNode().(*Node_OrderedListNode); ok {
		return x.OrderedListNode
	}
	return nil
}

func (x *Node) GetUnorderedListNode() *UnorderedListNode {
	if x, ok := x.GetNode().(*Node_UnorderedListNode); ok {
		return x.UnorderedListNode
	}
	return nil
}

func (x *Node) GetTaskListNode() *TaskListNode {
	if x, ok := x.GetNode().(*Node_TaskListNode); ok {
		return x.TaskListNode
	}
	return nil
}

func (x *Node) GetMathBlockNode() *MathBlockNode {
	if x, ok := x.GetNode().(*Node_MathBlockNode); ok {
		return x.MathBlockNode
	}
	return nil
}

func (x *Node) GetTableNode() *TableNode {
	if x, ok := x.GetNode().(*Node_TableNode); ok {
		return x.TableNode
	}
	return nil
}

func (x *Node) GetEmbeddedContentNode() *EmbeddedContentNode {
	if x, ok := x.GetNode().(*Node_EmbeddedContentNode); ok {
		return x.EmbeddedContentNode
	}
	return nil
}

func (x *Node) GetTextNode() *TextNode {
	if x, ok := x.GetNode().(*Node_TextNode); ok {
		return x.TextNode
	}
	return nil
}

func (x *Node) GetBoldNode() *BoldNode {
	if x, ok := x.GetNode().(*Node_BoldNode); ok {
		return x.BoldNode
	}
	return nil
}

func (x *Node) GetItalicNode() *ItalicNode {
	if x, ok := x.GetNode().(*Node_ItalicNode); ok {
		return x.ItalicNode
	}
	return nil
}

func (x *Node) GetBoldItalicNode() *BoldItalicNode {
	if x, ok := x.GetNode().(*Node_BoldItalicNode); ok {
		return x.BoldItalicNode
	}
	return nil
}

func (x *Node) GetCodeNode() *CodeNode {
	if x, ok := x.GetNode().(*Node_CodeNode); ok {
		return x.CodeNode
	}
	return nil
}

func (x *Node) GetImageNode() *ImageNode {
	if x, ok := x.GetNode().(*Node_ImageNode); ok {
		return x.ImageNode
	}
	return nil
}

func (x *Node) GetLinkNode() *LinkNode {
	if x, ok := x.GetNode().(*Node_LinkNode); ok {
		return x.LinkNode
	}
	return nil
}

func (x *Node) GetAutoLinkNode() *AutoLinkNode {
	if x, ok := x.GetNode().(*Node_AutoLinkNode); ok {
		return x.AutoLinkNode
	}
	return nil
}

func (x *Node) GetTagNode() *TagNode {
	if x, ok := x.GetNode().(*Node_TagNode); ok {
		return x.TagNode
	}
	return nil
}

func (x *Node) GetStrikethroughNode() *StrikethroughNode {
	if x, ok := x.GetNode().(*Node_StrikethroughNode); ok {
		return x.StrikethroughNode
	}
	return nil
}

func (x *Node) GetEscapingCharacterNode() *EscapingCharacterNode {
	if x, ok := x.GetNode().(*Node_EscapingCharacterNode); ok {
		return x.EscapingCharacterNode
	}
	return nil
}

func (x *Node) GetMathNode() *MathNode {
	if x, ok := x.GetNode().(*Node_MathNode); ok {
		return x.MathNode
	}
	return nil
}

func (x *Node) GetHighlightNode() *HighlightNode {
	if x, ok := x.GetNode().(*Node_HighlightNode); ok {
		return x.HighlightNode
	}
	return nil
}

func (x *Node) GetSubscriptNode() *SubscriptNode {
	if x, ok := x.GetNode().(*Node_SubscriptNode); ok {
		return x.SubscriptNode
	}
	return nil
}

func (x *Node) GetSuperscriptNode() *SuperscriptNode {
	if x, ok := x.GetNode().(*Node_SuperscriptNode); ok {
		return x.SuperscriptNode
	}
	return nil
}

func (x *Node) GetReferencedContentNode() *ReferencedContentNode {
	if x, ok := x.GetNode().(*Node_ReferencedContentNode); ok {
		return x.ReferencedContentNode
	}
	return nil
}

type isNode_Node interface {
	isNode_Node()
}

type Node_LineBreakNode struct {
	LineBreakNode *LineBreakNode `protobuf:"bytes,2,opt,name=line_break_node,json=lineBreakNode,proto3,oneof"`
}

type Node_ParagraphNode struct {
	ParagraphNode *ParagraphNode `protobuf:"bytes,3,opt,name=paragraph_node,json=paragraphNode,proto3,oneof"`
}

type Node_CodeBlockNode struct {
	CodeBlockNode *CodeBlockNode `protobuf:"bytes,4,opt,name=code_block_node,json=codeBlockNode,proto3,oneof"`
}

type Node_HeadingNode struct {
	HeadingNode *HeadingNode `protobuf:"bytes,5,opt,name=heading_node,json=headingNode,proto3,oneof"`
}

type Node_HorizontalRuleNode struct {
	HorizontalRuleNode *HorizontalRuleNode `protobuf:"bytes,6,opt,name=horizontal_rule_node,json=horizontalRuleNode,proto3,oneof"`
}

type Node_BlockquoteNode struct {
	BlockquoteNode *BlockquoteNode `protobuf:"bytes,7,opt,name=blockquote_node,json=blockquoteNode,proto3,oneof"`
}

type Node_OrderedListNode struct {
	OrderedListNode *OrderedListNode `protobuf:"bytes,8,opt,name=ordered_list_node,json=orderedListNode,proto3,oneof"`
}

type Node_UnorderedListNode struct {
	UnorderedListNode *UnorderedListNode `protobuf:"bytes,9,opt,name=unordered_list_node,json=unorderedListNode,proto3,oneof"`
}

type Node_TaskListNode struct {
	TaskListNode *TaskListNode `protobuf:"bytes,10,opt,name=task_list_node,json=taskListNode,proto3,oneof"`
}

type Node_MathBlockNode struct {
	MathBlockNode *MathBlockNode `protobuf:"bytes,11,opt,name=math_block_node,json=mathBlockNode,proto3,oneof"`
}

type Node_TableNode struct {
	TableNode *TableNode `protobuf:"bytes,12,opt,name=table_node,json=tableNode,proto3,oneof"`
}

type Node_EmbeddedContentNode struct {
	EmbeddedContentNode *EmbeddedContentNode `protobuf:"bytes,13,opt,name=embedded_content_node,json=embeddedContentNode,proto3,oneof"`
}

type Node_TextNode struct {
	TextNode *TextNode `protobuf:"bytes,14,opt,name=text_node,json=textNode,proto3,oneof"`
}

type Node_BoldNode struct {
	BoldNode *BoldNode `protobuf:"bytes,15,opt,name=bold_node,json=boldNode,proto3,oneof"`
}

type Node_ItalicNode struct {
	ItalicNode *ItalicNode `protobuf:"bytes,16,opt,name=italic_node,json=italicNode,proto3,oneof"`
}

type Node_BoldItalicNode struct {
	BoldItalicNode *BoldItalicNode `protobuf:"bytes,17,opt,name=bold_italic_node,json=boldItalicNode,proto3,oneof"`
}

type Node_CodeNode struct {
	CodeNode *CodeNode `protobuf:"bytes,18,opt,name=code_node,json=codeNode,proto3,oneof"`
}

type Node_ImageNode struct {
	ImageNode *ImageNode `protobuf:"bytes,19,opt,name=image_node,json=imageNode,proto3,oneof"`
}

type Node_LinkNode struct {
	LinkNode *LinkNode `protobuf:"bytes,20,opt,name=link_node,json=linkNode,proto3,oneof"`
}

type Node_AutoLinkNode struct {
	AutoLinkNode *AutoLinkNode `protobuf:"bytes,21,opt,name=auto_link_node,json=autoLinkNode,proto3,oneof"`
}

type Node_TagNode struct {
	TagNode *TagNode `protobuf:"bytes,22,opt,name=tag_node,json=tagNode,proto3,oneof"`
}

type Node_StrikethroughNode struct {
	StrikethroughNode *StrikethroughNode `protobuf:"bytes,23,opt,name=strikethrough_node,json=strikethroughNode,proto3,oneof"`
}

type Node_EscapingCharacterNode struct {
	EscapingCharacterNode *EscapingCharacterNode `protobuf:"bytes,24,opt,name=escaping_character_node,json=escapingCharacterNode,proto3,oneof"`
}

type Node_MathNode struct {
	MathNode *MathNode `protobuf:"bytes,25,opt,name=math_node,json=mathNode,proto3,oneof"`
}

type Node_HighlightNode struct {
	HighlightNode *HighlightNode `protobuf:"bytes,26,opt,name=highlight_node,json=highlightNode,proto3,oneof"`
}

type Node_SubscriptNode struct {
	SubscriptNode *SubscriptNode `protobuf:"bytes,27,opt,name=subscript_node,json=subscriptNode,proto3,oneof"`
}

type Node_SuperscriptNode struct {
	SuperscriptNode *SuperscriptNode `protobuf:"bytes,28,opt,name=superscript_node,json=superscriptNode,proto3,oneof"`
}

type Node_ReferencedContentNode struct {
	ReferencedContentNode *ReferencedContentNode `protobuf:"bytes,29,opt,name=referenced_content_node,json=referencedContentNode,proto3,oneof"`
}

func (*Node_LineBreakNode) isNode_Node() {}

func (*Node_ParagraphNode) isNode_Node() {}

func (*Node_CodeBlockNode) isNode_Node() {}

func (*Node_HeadingNode) isNode_Node() {}

func (*Node_HorizontalRuleNode) isNode_Node() {}

func (*Node_BlockquoteNode) isNode_Node() {}

func (*Node_OrderedListNode) isNode_Node() {}

func (*Node_UnorderedListNode) isNode_Node() {}

func (*Node_TaskListNode) isNode_Node() {}

func (*Node_MathBlockNode) isNode_Node() {}

func (*Node_TableNode) isNode_Node() {}

func (*Node_EmbeddedContentNode) isNode_Node() {}

func (*Node_TextNode) isNode_Node() {}

func (*Node_BoldNode) isNode_Node() {}

func (*Node_ItalicNode) isNode_Node() {}

func (*Node_BoldItalicNode) isNode_Node() {}

func (*Node_CodeNode) isNode_Node() {}

func (*Node_ImageNode) isNode_Node() {}

func (*Node_LinkNode) isNode_Node() {}

func (*Node_AutoLinkNode) isNode_Node() {}

func (*Node_TagNode) isNode_Node() {}

func (*Node_StrikethroughNode) isNode_Node() {}

func (*Node_EscapingCharacterNode) isNode_Node() {}

func (*Node_MathNode) isNode_Node() {}

func (*Node_HighlightNode) isNode_Node() {}

func (*Node_SubscriptNode) isNode_Node() {}

func (*Node_SuperscriptNode) isNode_Node() {}

func (*Node_ReferencedContentNode) isNode_Node() {}

type LineBreakNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LineBreakNode) Reset() {
	*x = LineBreakNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineBreakNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineBreakNode) ProtoMessage() {}

func (x *LineBreakNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineBreakNode.ProtoReflect.Descriptor instead.
func (*LineBreakNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{1}
}

type ParagraphNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*Node `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *ParagraphNode) Reset() {
	*x = ParagraphNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParagraphNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParagraphNode) ProtoMessage() {}

func (x *ParagraphNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParagraphNode.ProtoReflect.Descriptor instead.
func (*ParagraphNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{2}
}

func (x *ParagraphNode) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

type CodeBlockNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Content  string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CodeBlockNode) Reset() {
	*x = CodeBlockNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeBlockNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeBlockNode) ProtoMessage() {}

func (x *CodeBlockNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeBlockNode.ProtoReflect.Descriptor instead.
func (*CodeBlockNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{3}
}

func (x *CodeBlockNode) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *CodeBlockNode) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type HeadingNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level    int32   `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Children []*Node `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *HeadingNode) Reset() {
	*x = HeadingNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadingNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadingNode) ProtoMessage() {}

func (x *HeadingNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadingNode.ProtoReflect.Descriptor instead.
func (*HeadingNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{4}
}

func (x *HeadingNode) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *HeadingNode) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

type HorizontalRuleNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *HorizontalRuleNode) Reset() {
	*x = HorizontalRuleNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalRuleNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalRuleNode) ProtoMessage() {}

func (x *HorizontalRuleNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalRuleNode.ProtoReflect.Descriptor instead.
func (*HorizontalRuleNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{5}
}

func (x *HorizontalRuleNode) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type BlockquoteNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*Node `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *BlockquoteNode) Reset() {
	*x = BlockquoteNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockquoteNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockquoteNode) ProtoMessage() {}

func (x *BlockquoteNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockquoteNode.ProtoReflect.Descriptor instead.
func (*BlockquoteNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{6}
}

func (x *BlockquoteNode) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

type OrderedListNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number   string  `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Indent   int32   `protobuf:"varint,2,opt,name=indent,proto3" json:"indent,omitempty"`
	Children []*Node `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *OrderedListNode) Reset() {
	*x = OrderedListNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderedListNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderedListNode) ProtoMessage() {}

func (x *OrderedListNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderedListNode.ProtoReflect.Descriptor instead.
func (*OrderedListNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{7}
}

func (x *OrderedListNode) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *OrderedListNode) GetIndent() int32 {
	if x != nil {
		return x.Indent
	}
	return 0
}

func (x *OrderedListNode) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

type UnorderedListNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol   string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Indent   int32   `protobuf:"varint,2,opt,name=indent,proto3" json:"indent,omitempty"`
	Children []*Node `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *UnorderedListNode) Reset() {
	*x = UnorderedListNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnorderedListNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnorderedListNode) ProtoMessage() {}

func (x *UnorderedListNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnorderedListNode.ProtoReflect.Descriptor instead.
func (*UnorderedListNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{8}
}

func (x *UnorderedListNode) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *UnorderedListNode) GetIndent() int32 {
	if x != nil {
		return x.Indent
	}
	return 0
}

func (x *UnorderedListNode) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

type TaskListNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol   string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Indent   int32   `protobuf:"varint,2,opt,name=indent,proto3" json:"indent,omitempty"`
	Complete bool    `protobuf:"varint,3,opt,name=complete,proto3" json:"complete,omitempty"`
	Children []*Node `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *TaskListNode) Reset() {
	*x = TaskListNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListNode) ProtoMessage() {}

func (x *TaskListNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListNode.ProtoReflect.Descriptor instead.
func (*TaskListNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{9}
}

func (x *TaskListNode) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TaskListNode) GetIndent() int32 {
	if x != nil {
		return x.Indent
	}
	return 0
}

func (x *TaskListNode) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *TaskListNode) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

type MathBlockNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *MathBlockNode) Reset() {
	*x = MathBlockNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MathBlockNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MathBlockNode) ProtoMessage() {}

func (x *MathBlockNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MathBlockNode.ProtoReflect.Descriptor instead.
func (*MathBlockNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{10}
}

func (x *MathBlockNode) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type TableNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    []string         `protobuf:"bytes,1,rep,name=header,proto3" json:"header,omitempty"`
	Delimiter []string         `protobuf:"bytes,2,rep,name=delimiter,proto3" json:"delimiter,omitempty"`
	Rows      []*TableNode_Row `protobuf:"bytes,3,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *TableNode) Reset() {
	*x = TableNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableNode) ProtoMessage() {}

func (x *TableNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableNode.ProtoReflect.Descriptor instead.
func (*TableNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{11}
}

func (x *TableNode) GetHeader() []string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TableNode) GetDelimiter() []string {
	if x != nil {
		return x.Delimiter
	}
	return nil
}

func (x *TableNode) GetRows() []*TableNode_Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

type EmbeddedContentNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	Params       string `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *EmbeddedContentNode) Reset() {
	*x = EmbeddedContentNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbeddedContentNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddedContentNode) ProtoMessage() {}

func (x *EmbeddedContentNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddedContentNode.ProtoReflect.Descriptor instead.
func (*EmbeddedContentNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{12}
}

func (x *EmbeddedContentNode) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *EmbeddedContentNode) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

type TextNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *TextNode) Reset() {
	*x = TextNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextNode) ProtoMessage() {}

func (x *TextNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextNode.ProtoReflect.Descriptor instead.
func (*TextNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{13}
}

func (x *TextNode) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type BoldNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol   string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Children []*Node `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *BoldNode) Reset() {
	*x = BoldNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoldNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoldNode) ProtoMessage() {}

func (x *BoldNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoldNode.ProtoReflect.Descriptor instead.
func (*BoldNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{14}
}

func (x *BoldNode) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *BoldNode) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

type ItalicNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol  string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ItalicNode) Reset() {
	*x = ItalicNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItalicNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItalicNode) ProtoMessage() {}

func (x *ItalicNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItalicNode.ProtoReflect.Descriptor instead.
func (*ItalicNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{15}
}

func (x *ItalicNode) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ItalicNode) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type BoldItalicNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol  string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *BoldItalicNode) Reset() {
	*x = BoldItalicNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoldItalicNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoldItalicNode) ProtoMessage() {}

func (x *BoldItalicNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoldItalicNode.ProtoReflect.Descriptor instead.
func (*BoldItalicNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{16}
}

func (x *BoldItalicNode) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *BoldItalicNode) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CodeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CodeNode) Reset() {
	*x = CodeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeNode) ProtoMessage() {}

func (x *CodeNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeNode.ProtoReflect.Descriptor instead.
func (*CodeNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{17}
}

func (x *CodeNode) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ImageNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AltText string `protobuf:"bytes,1,opt,name=alt_text,json=altText,proto3" json:"alt_text,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ImageNode) Reset() {
	*x = ImageNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageNode) ProtoMessage() {}

func (x *ImageNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageNode.ProtoReflect.Descriptor instead.
func (*ImageNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{18}
}

func (x *ImageNode) GetAltText() string {
	if x != nil {
		return x.AltText
	}
	return ""
}

func (x *ImageNode) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type LinkNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *LinkNode) Reset() {
	*x = LinkNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkNode) ProtoMessage() {}

func (x *LinkNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkNode.ProtoReflect.Descriptor instead.
func (*LinkNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{19}
}

func (x *LinkNode) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *LinkNode) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type AutoLinkNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	IsRawText bool   `protobuf:"varint,2,opt,name=is_raw_text,json=isRawText,proto3" json:"is_raw_text,omitempty"`
}

func (x *AutoLinkNode) Reset() {
	*x = AutoLinkNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoLinkNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoLinkNode) ProtoMessage() {}

func (x *AutoLinkNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoLinkNode.ProtoReflect.Descriptor instead.
func (*AutoLinkNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{20}
}

func (x *AutoLinkNode) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AutoLinkNode) GetIsRawText() bool {
	if x != nil {
		return x.IsRawText
	}
	return false
}

type TagNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *TagNode) Reset() {
	*x = TagNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagNode) ProtoMessage() {}

func (x *TagNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagNode.ProtoReflect.Descriptor instead.
func (*TagNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{21}
}

func (x *TagNode) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type StrikethroughNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *StrikethroughNode) Reset() {
	*x = StrikethroughNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrikethroughNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrikethroughNode) ProtoMessage() {}

func (x *StrikethroughNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrikethroughNode.ProtoReflect.Descriptor instead.
func (*StrikethroughNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{22}
}

func (x *StrikethroughNode) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type EscapingCharacterNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *EscapingCharacterNode) Reset() {
	*x = EscapingCharacterNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EscapingCharacterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EscapingCharacterNode) ProtoMessage() {}

func (x *EscapingCharacterNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EscapingCharacterNode.ProtoReflect.Descriptor instead.
func (*EscapingCharacterNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{23}
}

func (x *EscapingCharacterNode) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type MathNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *MathNode) Reset() {
	*x = MathNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MathNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MathNode) ProtoMessage() {}

func (x *MathNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MathNode.ProtoReflect.Descriptor instead.
func (*MathNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{24}
}

func (x *MathNode) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type HighlightNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *HighlightNode) Reset() {
	*x = HighlightNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighlightNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighlightNode) ProtoMessage() {}

func (x *HighlightNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighlightNode.ProtoReflect.Descriptor instead.
func (*HighlightNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{25}
}

func (x *HighlightNode) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type SubscriptNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *SubscriptNode) Reset() {
	*x = SubscriptNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptNode) ProtoMessage() {}

func (x *SubscriptNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptNode.ProtoReflect.Descriptor instead.
func (*SubscriptNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{26}
}

func (x *SubscriptNode) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type SuperscriptNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *SuperscriptNode) Reset() {
	*x = SuperscriptNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperscriptNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperscriptNode) ProtoMessage() {}

func (x *SuperscriptNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperscriptNode.ProtoReflect.Descriptor instead.
func (*SuperscriptNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{27}
}

func (x *SuperscriptNode) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ReferencedContentNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	Params       string `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *ReferencedContentNode) Reset() {
	*x = ReferencedContentNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferencedContentNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferencedContentNode) ProtoMessage() {}

func (x *ReferencedContentNode) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferencedContentNode.ProtoReflect.Descriptor instead.
func (*ReferencedContentNode) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{28}
}

func (x *ReferencedContentNode) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ReferencedContentNode) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

type TableNode_Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells []string `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (x *TableNode_Row) Reset() {
	*x = TableNode_Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_v1_node_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableNode_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableNode_Row) ProtoMessage() {}

func (x *TableNode_Row) ProtoReflect() protoreflect.Message {
	mi := &file_node_v1_node_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableNode_Row.ProtoReflect.Descriptor instead.
func (*TableNode_Row) Descriptor() ([]byte, []int) {
	return file_node_v1_node_proto_rawDescGZIP(), []int{11, 0}
}

func (x *TableNode_Row) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

var File_node_v1_node_proto protoreflect.FileDescriptor

var file_node_v1_node_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x76, 0x31, 0x22, 0x99, 0x10, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x6f,
	0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x0f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x12, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x49, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x75, 0x6e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x44,
	0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x6d, 0x61, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x15, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x13, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a,
	0x09, 0x62, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f,
	0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x61,
	0x6c, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x74, 0x61, 0x6c, 0x69,
	0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x62, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x74,
	0x61, 0x6c, 0x69, 0x63, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6f, 0x6c, 0x64, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x62, 0x6f, 0x6c, 0x64, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6d, 0x61,
	0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x44, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x5f, 0x0a, 0x17, 0x65, 0x73, 0x63, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x73, 0x63, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x15, 0x65, 0x73, 0x63, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x61, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x68, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6d, 0x61,
	0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x5f, 0x0a, 0x17, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x22, 0x0f, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x4e, 0x6f, 0x64,
	0x65, 0x22, 0x41, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x22, 0x45, 0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x0b, 0x48,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x30, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x22, 0x2c, 0x0a, 0x12, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x22, 0x42, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x22, 0x73, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6d, 0x61,
	0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x75, 0x0a, 0x11, 0x55, 0x6e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22,
	0x29, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x1a, 0x1b, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x52,
	0x0a, 0x13, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x24, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x08, 0x42, 0x6f, 0x6c, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x3e,
	0x0a, 0x0a, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x42,
	0x0a, 0x0e, 0x42, 0x6f, 0x6c, 0x64, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x24, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x38, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x22, 0x30, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0x40, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x77,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52,
	0x61, 0x77, 0x54, 0x65, 0x78, 0x74, 0x22, 0x23, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x11, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x15, 0x45, 0x73,
	0x63, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x24, 0x0a, 0x08, 0x4d,
	0x61, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x29, 0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x0d,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2a, 0xcb, 0x03, 0x0a, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x41, 0x52, 0x41, 0x47, 0x52, 0x41, 0x50, 0x48, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x48, 0x45, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x10, 0x06, 0x12, 0x10,
	0x0a, 0x0c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x07,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x0d, 0x12, 0x08,
	0x0a, 0x04, 0x42, 0x4f, 0x4c, 0x44, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x54, 0x41, 0x4c,
	0x49, 0x43, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x54, 0x41,
	0x4c, 0x49, 0x43, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x11, 0x12,
	0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x12, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x41, 0x47, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x54, 0x52, 0x49, 0x4b, 0x45, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x16, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x53, 0x43, 0x41, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x52,
	0x41, 0x43, 0x54, 0x45, 0x52, 0x10, 0x17, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x54, 0x48, 0x10,
	0x18, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x19,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x1a, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x50, 0x45, 0x52, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x1b,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x44, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x1c, 0x42, 0x86, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x42,
	0x09, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0b, 0x67, 0x65,
	0x6e, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x47, 0x4e, 0x58, 0xaa,
	0x02, 0x0e, 0x47, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x0e, 0x47, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x5c, 0x4e, 0x6f, 0x64, 0x65, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x1a, 0x47, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x5c, 0x4e, 0x6f, 0x64, 0x65, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x10, 0x47, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x3a, 0x3a, 0x4e, 0x6f, 0x64, 0x65, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_node_v1_node_proto_rawDescOnce sync.Once
	file_node_v1_node_proto_rawDescData = file_node_v1_node_proto_rawDesc
)

func file_node_v1_node_proto_rawDescGZIP() []byte {
	file_node_v1_node_proto_rawDescOnce.Do(func() {
		file_node_v1_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_node_v1_node_proto_rawDescData)
	})
	return file_node_v1_node_proto_rawDescData
}

var file_node_v1_node_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_node_v1_node_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_node_v1_node_proto_goTypes = []interface{}{
	(NodeType)(0),                 // 0: gomark.node.v1.NodeType
	(*Node)(nil),                  // 1: gomark.node.v1.Node
	(*LineBreakNode)(nil),         // 2: gomark.node.v1.LineBreakNode
	(*ParagraphNode)(nil),         // 3: gomark.node.v1.ParagraphNode
	(*CodeBlockNode)(nil),         // 4: gomark.node.v1.CodeBlockNode
	(*HeadingNode)(nil),           // 5: gomark.node.v1.HeadingNode
	(*HorizontalRuleNode)(nil),    // 6: gomark.node.v1.HorizontalRuleNode
	(*BlockquoteNode)(nil),        // 7: gomark.node.v1.BlockquoteNode
	(*OrderedListNode)(nil),       // 8: gomark.node.v1.OrderedListNode
	(*UnorderedListNode)(nil),     // 9: gomark.node.v1.UnorderedListNode
	(*TaskListNode)(nil),          // 10: gomark.node.v1.TaskListNode
	(*MathBlockNode)(nil),         // 11: gomark.node.v1.MathBlockNode
	(*TableNode)(nil),             // 12: gomark.node.v1.TableNode
	(*EmbeddedContentNode)(nil),   // 13: gomark.node.v1.EmbeddedContentNode
	(*TextNode)(nil),              // 14: gomark.node.v1.TextNode
	(*BoldNode)(nil),              // 15: gomark.node.v1.BoldNode
	(*ItalicNode)(nil),            // 16: gomark.node.v1.ItalicNode
	(*BoldItalicNode)(nil),        // 17: gomark.node.v1.BoldItalicNode
	(*CodeNode)(nil),              // 18: gomark.node.v1.CodeNode
	(*ImageNode)(nil),             // 19: gomark.node.v1.ImageNode
	(*LinkNode)(nil),              // 20: gomark.node.v1.LinkNode
	(*AutoLinkNode)(nil),          // 21: gomark.node.v1.AutoLinkNode
	(*TagNode)(nil),               // 22: gomark.node.v1.TagNode
	(*StrikethroughNode)(nil),     // 23: gomark.node.v1.StrikethroughNode
	(*EscapingCharacterNode)(nil), // 24: gomark.node.v1.EscapingCharacterNode
	(*MathNode)(nil),              // 25: gomark.node.v1.MathNode
	(*HighlightNode)(nil),         // 26: gomark.node.v1.HighlightNode
	(*SubscriptNode)(nil),         // 27: gomark.node.v1.SubscriptNode
	(*SuperscriptNode)(nil),       // 28: gomark.node.v1.SuperscriptNode
	(*ReferencedContentNode)(nil), // 29: gomark.node.v1.ReferencedContentNode
	(*TableNode_Row)(nil),         // 30: gomark.node.v1.TableNode.Row
}
var file_node_v1_node_proto_depIdxs = []int32{
	0,  // 0: gomark.node.v1.Node.type:type_name -> gomark.node.v1.NodeType
	2,  // 1: gomark.node.v1.Node.line_break_node:type_name -> gomark.node.v1.LineBreakNode
	3,  // 2: gomark.node.v1.Node.paragraph_node:type_name -> gomark.node.v1.ParagraphNode
	4,  // 3: gomark.node.v1.Node.code_block_node:type_name -> gomark.node.v1.CodeBlockNode
	5,  // 4: gomark.node.v1.Node.heading_node:type_name -> gomark.node.v1.HeadingNode
	6,  // 5: gomark.node.v1.Node.horizontal_rule_node:type_name -> gomark.node.v1.HorizontalRuleNode
	7,  // 6: gomark.node.v1.Node.blockquote_node:type_name -> gomark.node.v1.BlockquoteNode
	8,  // 7: gomark.node.v1.Node.ordered_list_node:type_name -> gomark.node.v1.OrderedListNode
	9,  // 8: gomark.node.v1.Node.unordered_list_node:type_name -> gomark.node.v1.UnorderedListNode
	10, // 9: gomark.node.v1.Node.task_list_node:type_name -> gomark.node.v1.TaskListNode
	11, // 10: gomark.node.v1.Node.math_block_node:type_name -> gomark.node.v1.MathBlockNode
	12, // 11: gomark.node.v1.Node.table_node:type_name -> gomark.node.v1.TableNode
	13, // 12: gomark.node.v1.Node.embedded_content_node:type_name -> gomark.node.v1.EmbeddedContentNode
	14, // 13: gomark.node.v1.Node.text_node:type_name -> gomark.node.v1.TextNode
	15, // 14: gomark.node.v1.Node.bold_node:type_name -> gomark.node.v1.BoldNode
	16, // 15: gomark.node.v1.Node.italic_node:type_name -> gomark.node.v1.ItalicNode
	17, // 16: gomark.node.v1.Node.bold_italic_node:type_name -> gomark.node.v1.BoldItalicNode
	18, // 17: gomark.node.v1.Node.code_node:type_name -> gomark.node.v1.CodeNode
	19, // 18: gomark.node.v1.Node.image_node:type_name -> gomark.node.v1.ImageNode
	20, // 19: gomark.node.v1.Node.link_node:type_name -> gomark.node.v1.LinkNode
	21, // 20: gomark.node.v1.Node.auto_link_node:type_name -> gomark.node.v1.AutoLinkNode
	22, // 21: gomark.node.v1.Node.tag_node:type_name -> gomark.node.v1.TagNode
	23, // 22: gomark.node.v1.Node.strikethrough_node:type_name -> gomark.node.v1.StrikethroughNode
	24, // 23: gomark.node.v1.Node.escaping_character_node:type_name -> gomark.node.v1.EscapingCharacterNode
	25, // 24: gomark.node.v1.Node.math_node:type_name -> gomark.node.v1.MathNode
	26, // 25: gomark.node.v1.Node.highlight_node:type_name -> gomark.node.v1.HighlightNode
	27, // 26: gomark.node.v1.Node.subscript_node:type_name -> gomark.node.v1.SubscriptNode
	28, // 27: gomark.node.v1.Node.superscript_node:type_name -> gomark.node.v1.SuperscriptNode
	29, // 28: gomark.node.v1.Node.referenced_content_node:type_name -> gomark.node.v1.ReferencedContentNode
	1,  // 29: gomark.node.v1.ParagraphNode.children:type_name -> gomark.node.v1.Node
	1,  // 30: gomark.node.v1.HeadingNode.children:type_name -> gomark.node.v1.Node
	1,  // 31: gomark.node.v1.BlockquoteNode.children:type_name -> gomark.node.v1.Node
	1,  // 32: gomark.node.v1.OrderedListNode.children:type_name -> gomark.node.v1.Node
	1,  // 33: gomark.node.v1.UnorderedListNode.children:type_name -> gomark.node.v1.Node
	1,  // 34: gomark.node.v1.TaskListNode.children:type_name -> gomark.node.v1.Node
	30, // 35: gomark.node.v1.TableNode.rows:type_name -> gomark.node.v1.TableNode.Row
	1,  // 36: gomark.node.v1.BoldNode.children:type_name -> gomark.node.v1.Node
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_node_v1_node_proto_init() }
func file_node_v1_node_proto_init() {
	if File_node_v1_node_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_node_v1_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineBreakNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParagraphNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeBlockNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadingNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalRuleNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockquoteNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderedListNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnorderedListNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MathBlockNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbeddedContentNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoldNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItalicNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoldItalicNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoLinkNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrikethroughNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EscapingCharacterNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MathNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighlightNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperscriptNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferencedContentNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_v1_node_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableNode_Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_node_v1_node_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Node_LineBreakNode)(nil),
		(*Node_ParagraphNode)(nil),
		(*Node_CodeBlockNode)(nil),
		(*Node_HeadingNode)(nil),
		(*Node_HorizontalRuleNode)(nil),
		(*Node_BlockquoteNode)(nil),
		(*Node_OrderedListNode)(nil),
		(*Node_UnorderedListNode)(nil),
		(*Node_TaskListNode)(nil),
		(*Node_MathBlockNode)(nil),
		(*Node_TableNode)(nil),
		(*Node_EmbeddedContentNode)(nil),
		(*Node_TextNode)(nil),
		(*Node_BoldNode)(nil),
		(*Node_ItalicNode)(nil),
		(*Node_BoldItalicNode)(nil),
		(*Node_CodeNode)(nil),
		(*Node_ImageNode)(nil),
		(*Node_LinkNode)(nil),
		(*Node_AutoLinkNode)(nil),
		(*Node_TagNode)(nil),
		(*Node_StrikethroughNode)(nil),
		(*Node_EscapingCharacterNode)(nil),
		(*Node_MathNode)(nil),
		(*Node_HighlightNode)(nil),
		(*Node_SubscriptNode)(nil),
		(*Node_SuperscriptNode)(nil),
		(*Node_ReferencedContentNode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_node_v1_node_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_node_v1_node_proto_goTypes,
		DependencyIndexes: file_node_v1_node_proto_depIdxs,
		EnumInfos:         file_node_v1_node_proto_enumTypes,
		MessageInfos:      file_node_v1_node_proto_msgTypes,
	}.Build()
	File_node_v1_node_proto = out.File
	file_node_v1_node_proto_rawDesc = nil
	file_node_v1_node_proto_goTypes = nil
	file_node_v1_node_proto_depIdxs = nil
}
